<style>
  .second_prod_v2 {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 8px;
  }

  .hidden {
    display: none !important;
  }

  .second_product_atc_v2 {
    display: flex;
    padding: 0px 12px 6px 12px;
    align-items: center;
    justify-content: center;
    gap: 20px;
    cursor: pointer;
    margin: 8px auto;
  }

  .second_prod_v2 img {
    height: 56px;
    width: 56px;
    border-radius: 50%;
    background-color: #fff;
    border: 1px solid rgba(16, 24, 32, 0.22);
  }

  @media only screen and (max-width: 1023px) {
    .second_prod_v2 img {
      height: 40px;
      width: 40px;
    }
  }

  .second_product_atc_v2 p {
    margin: 0;
    padding: 0;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 140%;
  }

  .second-toggle-wrapper {
    margin-left: 0;
    padding-left: 0px;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: 40px;
    height: 20px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: 0.4s;
    border-radius: 34px;
  }

  .slider:before {
    position: absolute;
    content: '';
    height: 16px;
    width: 16px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    transition: 0.4s;
    border-radius: 50%;
  }

  input:checked + .slider {
    background-color: #000;
  }

  input:checked + .slider:before {
    transform: translateX(20px);
  }

  .second_prod_atc_container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 8px;
  }
  .second_product_atc {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.64);
    cursor: pointer;
    margin: 8px auto;
  }

  .second_product_atc p {
    margin: 0;
    padding: 0;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 140%;
  }

  .second_product_atc_v2 p > span {
    display: none;
  }

  @media screen and (max-width: 1023px) {
    .second_product_atc_v2 {
      width: 100%;
      padding-bottom: 8px;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      margin: 8px 0;
      padding-left: 0;
      padding-right: 0;
      gap: 8px;
    }

    .swiitch {
      padding-left: 0;
      margin-left: 0;
    }

    .second_product_atc_v2 p {
      font-size: 14px;
    }

    .second_product_atc_v2 p > span {
      display: block;
    }
  }
</style>
{% assign second_product_variant = second_product.variants.first %}

{% assign selling_plan_ids = '' %}
{% for allocation in second_product_variant.selling_plan_allocations %}
  {% assign selling_plan_ids = selling_plan_ids | append: allocation.selling_plan.id | append: ',' %}
{% endfor %}

{% assign box_product_main = null %}
{% for variant in product.variants %}
  {% assign variant_title_downcase = variant.title | downcase %}
  {% if variant_title_downcase contains 'with gift box' %}
    {% assign box_product_main = variant %}
  {% endif %}
{% endfor %}

{% assign box_product_second = null %}
{% for variant in second_product.variants %}
  {% assign variant_title_downcase = variant.title | downcase %}
  {% if variant_title_downcase contains 'with gift box' %}
    {% assign box_product_second = variant %}
  {% endif %}
{% endfor %}

{% assign selling_plan_ids = '' %}
{% for allocation in second_product_variant.selling_plan_allocations %}
  {% assign selling_plan_ids = selling_plan_ids | append: allocation.selling_plan.id | append: ',' %}
{% endfor %}

{% assign box_product_main = null %}
{% for variant in product.variants %}
  {% assign variant_title_downcase = variant.title | downcase %}
  {% if variant_title_downcase contains 'with gift box' %}
    {% assign box_product_main = variant %}
  {% endif %}
{% endfor %}

{% assign box_product_second = null %}
{% for variant in second_product.variants %}
  {% assign variant_title_downcase = variant.title | downcase %}
  {% if variant_title_downcase contains 'with gift box' %}
    {% assign box_product_second = variant %}
  {% endif %}
{% endfor %}

{%- form 'product', product, id: form_id, class: 'product-single__form' -%}
  {%- liquid
    assign gift_card_recipient_feature_active = false
    if block.settings.show_gift_card_recipient and product.gift_card?
      assign gift_card_recipient_feature_active = true
    endif

    assign enable_dynamic_buttons = false
    if show_dynamic_checkout and template != 'product.preorder' and gift_card_recipient_feature_active == false
      assign enable_dynamic_buttons = true
    endif
  -%}

  {%- if gift_card_recipient_feature_active -%}
    {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
  {%- endif -%}

  {%- if enable_dynamic_buttons -%}
    <div class="payment-buttons">
  {%- endif -%}

  {%- liquid
    assign default_text = 'products.product.add_to_bag' | t
    assign button_text = 'products.product.add_to_bag' | t
    if template contains 'preorder'
      assign default_text = 'products.product.preorder' | t
      assign button_text = 'products.product.preorder' | t
    endif
    unless current_variant.available
      assign button_text = 'products.product.sold_out' | t
    endunless
  -%}

  {% assign box_product = null %}
  {% for variant in product.variants %}
    {% assign variant_title_downcase = variant.title | downcase %}
    {% if variant_title_downcase contains 'with gift box' %}
      {% assign box_product = variant %}
    {% endif %}
  {% endfor %}
  {% if box_product and current_variant.available %}
    <div class="gift-box-product">
      <div class="gift-box-details">
        {% if box_product.featured_media != blank %}
          <div class="gift-box-image">
            {{ box_product.featured_media | image_url: width: original, height: auto | image_tag }}
          </div>
        {% endif %}
        <div class="gift-box-form">
          <input type="checkbox" id="gift-box-product" name="gift-box-product" value="gift-box-product">
          <label for="gift-box-product" class="gift-box-text">Add Gift Box</label>
        </div>
      </div>
      <div class="gift-box-price">+{{ box_product.price | minus: product.price | money | remove: ' ' }}</div>
    </div>
  {% endif %}

  <div class=" second_prod_atc_container hidden">
    <div class="second_product_atc" data-variant-id="{{ second_product_variant.id }}">
      {{ second_product.images[0] | image_url: height: 25 | image_tag }}
      {% assign price_per_ml_old = product.price | divided_by: 8 %}
      {% assign price_per_ml_new = second_product.price | divided_by: 20 %}

      {% assign save = price_per_ml_old | minus: price_per_ml_new %}
      <p>
        <b>20ml </b>· Save <b>${{ save | money_without_currency }}/ml </b>
      </p>

      {% assign extra_price = second_product.price | minus: product.price %}
      <p>+ {{ extra_price | money | remove: ' ' }}</p>
    </div>
  </div>

  <div class="second_prod_v2 hidden">
    <div class="second_product_atc_v2" data-variant-id="{{ second_product_variant.id }}">
      {{ second_product.images[0] | image_url: height: 60 | image_tag }}
      {% assign price_per_ml_old = product.price | divided_by: 8 %}
      {% assign price_per_ml_new = second_product.price | divided_by: 20 %}
      {% assign save = price_per_ml_old | minus: price_per_ml_new %}
      <p>
        <b>20ml</b> · Save <b>${{ save | money_without_currency }}/ml</b>
      </p>
      {% assign extra_price = second_product.price | minus: product.price %}
      <p class="extra_price">+{{ extra_price | money | remove: ' ' }}</p>

      <!-- Toggle Switch -->
      <div class="second-toggle-wrapper">
        <label class="switch">
          <input type="checkbox" id="second-toggle">
          <span class="slider round"></span>
        </label>
      </div>
    </div>
  </div>

  <div class="qty-cta-wrapper {% unless current_variant.available %} no__buttons {% endunless %}">
    {% if current_variant.available %}
      <div class="product__quantity">
        {% assign qty_id = section_id | append: product.id %}
        {%- render 'quantity-input-dropdown', form_id: form_id, id: qty_id, qty: 1, min: 1 -%}
      </div>
    {% endif %}

    <button
      {% if product.empty? %}
        type="button"
      {% else %}
        type="submit"
      {% endif %}
      name="add"
      data-add-to-cart
      class="btn btn--full add-to-cart{% if enable_dynamic_buttons and product.selling_plan_groups == empty %} btn--secondary{% endif %}"
      {% unless current_variant.available %}
        disabled="disabled"
      {% endunless %}
    >
      <span data-add-to-cart-text data-default-text="{{ default_text }}">
        {{ button_text }}&nbsp;&nbsp;|&nbsp;&nbsp;
        {%- if product.metafields.custom.gift_card_default_variant_title -%}
          {{- product.metafields.custom.gift_card_default_variant_title | money -}}
        {%- else -%}
          {{- product.price | money | remove: ' ' -}}
        {%- endif %}
      </span>
    </button>
  </div>

  {%- if enable_dynamic_buttons -%}
    {{ form | payment_button }}
  {%- endif -%}

  {%- if enable_dynamic_buttons -%}
    </div>
  {%- endif -%}

  <div class="shopify-payment-terms product__policies">{{ form | payment_terms }}</div>

  <select name="id" data-product-select class="product-single__variants no-js">
    {%- for variant in product.variants -%}
      {%- if variant.available -%}
        <option
          {% if variant == product.selected_or_first_available_variant %}
            selected="selected"
          {% endif %}
          value="{{ variant.id }}"
        >
          {{ variant.title }} - {{ variant.price | money_with_currency }}
        </option>
      {%- else -%}
        <option disabled="disabled">{{ variant.title }} - {{ 'products.product.sold_out' | t }}</option>
      {%- endif -%}
    {%- endfor -%}
  </select>
{%- endform -%}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const toggle = document.getElementById('second-toggle');
    const variantSelect = document.querySelector('select[name="id"]');
    const secondVariantId = '{{ second_product_variant.id }}';

    if (!toggle || !variantSelect) return;

    // Save the original options once
    const originalOptions = Array.from(variantSelect.options).map((opt) => opt.cloneNode(true));

    toggle.addEventListener('change', function () {
      if (this.checked) {
        console.log('Checked!');
        variantSelect.innerHTML = '';
        const secondOption = document.createElement('option');
        secondOption.value = secondVariantId;
        secondOption.selected = true;
        secondOption.textContent = 'Second Product';
        variantSelect.appendChild(secondOption);
      } else {
        console.log('Unchecked!');
        // Restore original product variants
        variantSelect.innerHTML = '';
        originalOptions.forEach((opt) => variantSelect.appendChild(opt.cloneNode(true)));
      }
    });
  });
</script>

{% comment %} for variant 1 {% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const secondATC = document.querySelector('.second_product_atc');
    if (secondATC) {
      secondATC.addEventListener('click', function () {
        const variantId = this.dataset.variantId;

        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log('Added to cart:', data);
            // Optional: Trigger cart drawer update or notification here
          })
          .catch((err) => console.error('Add to cart failed:', err));
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const toggle = document.getElementById('second-toggle');
    const secondProductVariantId = '{{ second_product_variant.id }}';

    if (!toggle) return;

    toggle.addEventListener('change', function () {
      if (this.checked) {
        // Add the second product directly to cart
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: JSON.stringify({
            id: secondProductVariantId,
            quantity: 1,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log('Second product added to cart:', data);
            // Optional: Trigger cart drawer update or show notification
          })
          .catch((err) => console.error('Add to cart failed:', err));
      } else {
        // Remove the second product from cart
        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: JSON.stringify({
            id: secondProductVariantId,
            quantity: 0,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log('Second product removed from cart:', data);
            // Optional: update cart UI
          })
          .catch((err) => console.error('Remove from cart failed:', err));
      }
    });
  });
</script>

{% comment %}
  Keep this incase if selling plan subscription or Gift Box functionality needed in future.
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const toggle = document.getElementById('second-toggle');
      const variantSelect = document.querySelector('select[name="id"]');
      const addToCartButton = document.querySelector('button[data-add-to-cart]');
      const giftBoxCheckbox = document.getElementById('gift-box-product');

      // Store references to both products' variants
      const mainProductId = '{{ product.selected_or_first_available_variant.id }}';
      const secondProductId = '{{ second_product_variant.id }}';
      const mainProductGiftBoxId = '{{ box_product_main.id }}';
      const secondProductGiftBoxId = '{{ box_product_second.id }}';

      if (!toggle || !variantSelect) return;

      // Save the original options once
      const originalOptions = Array.from(variantSelect.options).map((opt) => opt.cloneNode(true));

      // Function to update the price display in the add to cart button
      const updatePriceDisplay = function (variantId) {
        let price;

        // Determine which price to show based on the selected variant
        if (variantId == secondProductId) {
          price = '{{ second_product.price | money | remove: " " }}';
        } else if (variantId == secondProductGiftBoxId) {
          price = '{{ box_product_second.price | money | remove: " " }}';
        } else if (variantId == mainProductGiftBoxId) {
          price = '{{ box_product_main.price | money | remove: " " }}';
        } else {
          price = '{{ product.price | money | remove: " " }}';
        }

        // Update the price in the add to cart button text
        const buttonTextSpan = addToCartButton.querySelector('[data-add-to-cart-text]');
        if (buttonTextSpan) {
          const buttonText = buttonTextSpan.getAttribute('data-default-text');
          buttonTextSpan.innerHTML = `${buttonText}&nbsp;&nbsp;|&nbsp;&nbsp;${price}`;
        }
      };

      // Handle the toggle switch for second product
      toggle.addEventListener('change', function () {
        if (this.checked) {
          console.log('Switching to second product');

          // Determine which variant to use based on gift box status
          const targetVariantId = giftBoxCheckbox && giftBoxCheckbox.checked ? secondProductGiftBoxId : secondProductId;

          // Clear and update the variant select
          variantSelect.innerHTML = '';
          const newOption = document.createElement('option');
          newOption.value = targetVariantId;
          newOption.selected = true;
          newOption.textContent =
            giftBoxCheckbox && giftBoxCheckbox.checked ? 'Second Product with Gift Box' : 'Second Product';
          variantSelect.appendChild(newOption);

          // Update the displayed price
          updatePriceDisplay(targetVariantId);
        } else {
          console.log('Switching back to main product');

          // Restore original product variants
          variantSelect.innerHTML = '';
          originalOptions.forEach((opt) => variantSelect.appendChild(opt.cloneNode(true)));

          // Determine which main product variant to select (with or without gift box)
          const targetVariantId = giftBoxCheckbox && giftBoxCheckbox.checked ? mainProductGiftBoxId : mainProductId;

          // Select the appropriate variant
          for (let i = 0; i < variantSelect.options.length; i++) {
            if (variantSelect.options[i].value === targetVariantId) {
              variantSelect.selectedIndex = i;
              break;
            }
          }

          // Update the displayed price
          updatePriceDisplay(targetVariantId);
        }

        // Trigger a change event on the select to ensure Shopify's handlers are called
        variantSelect.dispatchEvent(new Event('change', { bubbles: true }));
      });

      // Handle the gift box checkbox changes
      if (giftBoxCheckbox) {
        giftBoxCheckbox.addEventListener('change', function () {
          if (toggle.checked) {
            // Second product is selected - update to appropriate second product variant
            const targetVariantId = this.checked ? secondProductGiftBoxId : secondProductId;

            // Update the variant select
            variantSelect.innerHTML = '';
            const newOption = document.createElement('option');
            newOption.value = targetVariantId;
            newOption.selected = true;
            newOption.textContent = this.checked ? 'Second Product with Gift Box' : 'Second Product';
            variantSelect.appendChild(newOption);
          } else {
            // Main product is selected - find appropriate main product variant
            const targetVariantId = this.checked ? mainProductGiftBoxId : mainProductId;

            // Find and select the appropriate main product variant
            for (let i = 0; i < variantSelect.options.length; i++) {
              if (variantSelect.options[i].value === targetVariantId) {
                variantSelect.selectedIndex = i;
                break;
              }
            }
          }

          // Update price display and trigger change event
          updatePriceDisplay(variantSelect.value);
          variantSelect.dispatchEvent(new Event('change', { bubbles: true }));
        });
      }

      // Selling plan IDs handling for subscription options
      const sellingPlanIds = '{{ selling_plan_ids }}';
      const idArr = sellingPlanIds.split(',').filter(Boolean);

      // Create a non-recursive waitForElement function using setInterval instead
      function waitForElement(selector, timeout = 10000, interval = 100) {
        return new Promise((resolve, reject) => {
          const startTime = Date.now();

          // Use setInterval instead of recursive setTimeout
          const checkInterval = setInterval(() => {
            const element = document.querySelector(selector);

            if (element) {
              clearInterval(checkInterval);
              resolve(element);
              return;
            }

            if (Date.now() - startTime > timeout) {
              clearInterval(checkInterval);
              reject(new Error(`Element ${selector} not found after ${timeout}ms`));
              return;
            }
          }, interval);
        });
      }

      // Function to handle RC options
      function setupRcOptions() {
        // Store original values when first found
        waitForElement('.rc-radio select option', 20000)
          .then((firstOption) => {
            console.log('RC options found, setting up...');

            document.querySelector('.rc-radio select').addEventListener('change', () => {
              if (toggle.checked) {
                const rcOptions = document.querySelectorAll('.rc-radio select option');
                rcOptions.forEach((option, index) => {
                  if (idArr[index]) {
                    option.value = idArr[index];
                  }
                });
              }
            });

            const options = document.querySelectorAll('.rc-radio select option');
            const originalValues = Array.from(options).map((option) => option.value);

            // Function to update options based on toggle state
            function updateRcOptions(isSecondProduct) {
              const rcOptions = document.querySelectorAll('.rc-radio select option');

              if (isSecondProduct) {
                // Replace with selling plan IDs for second product
                rcOptions.forEach((option, index) => {
                  if (idArr[index]) {
                    option.value = idArr[index];
                  }
                });
              } else {
                // Restore original values
                rcOptions.forEach((option, index) => {
                  if (originalValues[index]) {
                    option.value = originalValues[index];
                  }
                });
              }
            }

            // Set initial state and add listener for changes
            updateRcOptions(toggle.checked);

            toggle.addEventListener('change', function () {
              updateRcOptions(this.checked);
            });
          })
          .catch((error) => {
            console.warn('RC options not found:', error);
          });
      }

      // Start watching for RC options
      setupRcOptions();
    });
  </script>
{% endcomment %}
